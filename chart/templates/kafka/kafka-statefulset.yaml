{{- if .Values.kafka.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-kafka
  labels: {{ include "logging.labels" . | indent 4 }}
spec:
  selector:
    matchLabels: {{ include "logging.selectorLabels" . | indent 6 }}
      type: kafka
  serviceName: kafka
  replicas: {{ .Values.kafka.replicas }}
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels: {{ include "logging.selectorLabels" . | indent 8 }}
        type: kafka
        {{- with .Values.kafka.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      priorityClassName: {{ default .Values.priorityClass .Values.kafka.priorityClass }}
      {{ with .Values.kafka.affinity -}}
      affinity: {{ toYaml . | nindent 8 }}
      {{- end -}}
      {{ with .Values.kafka.tolerations }}
      tolerations: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets: {{ toYaml . | nindent 6 }}
      {{- end }}
      initContainers:
      - name: init
        image: {{ include "init_container.image" . }}
        imagePullPolicy: {{ .Values.init_container.imagePullPolicy }}
        command:
        - /bin/sh
        - -c
        - "mkdir /kafka/data -p; chown 1001:0 -R /kafka/data"
        volumeMounts:
        - name: kafka-data
          mountPath: /kafka
        securityContext:
          runAsUser: 0
          privileged: true
      containers:
      - name: kafka
        image: {{ .Values.kafka.image }}:{{ .Values.kafka.imageTag }}
        imagePullPolicy: {{ .Values.kafka.imagePullPolicy }}
        ports:
        - containerPort: 9092
          name: kafka
        - containerPort: 9093
          name: broker
        - containerPort: 12345
          name: jmx
        resources: {{ toYaml .Values.kafka.resources | nindent 10 }}
        env:
        # - name: BITNAMI_DEBUG # get more information from Kafka pod logs
        #   value: "true" # default "false"
        - name: BROKER_ID_COMMAND
          value: "hostname | awk -F'-' '{print $NF}'"
        - name: KAFKA_ENABLE_KRAFT # enable "KRaft mode" aka "ZooKeeper-less mode"
          value: "yes"
        - name: KAFKA_KRAFT_CLUSTER_ID
          value: {{ .Values.kafka.kraftId }}
        - name: KAFKA_CFG_PROCESS_ROLES
          value: "broker,controller"
        - name: KAFKA_CFG_CONTROLLER_QUORUM_VOTERS
          value: {{ include "kafkaQuorum" (dict "replicas" .Values.kafka.replicas "releaseName" $.Release.Name) }}
        - name: KAFKA_CFG_CONTROLLER_LISTENER_NAMES
          value: CONTROLLER
        - name: KAFKA_CFG_LISTENERS
          value: PLAINTEXT://:9092,CONTROLLER://:9093
        - name: KAFKA_CFG_INITIAL_BROKER_REGISTRATION_TIMEOUT_MS
          value: "240000"
        - name: KAFKA_CFG_LOG_DIRS
          value: "/kafka/data"
        - name: KAFKA_HEAP_OPTS
          value: "-Xmx{{ .Values.kafka.heapSize }} -Xms{{ .Values.kafka.heapSize }}"
        - name: ALLOW_PLAINTEXT_LISTENER
          value: "yes"
        lifecycle:
          preStop:
            exec:
              command: ["/opt/bitnami/kafka/bin/kafka-server-stop.sh"]
        readinessProbe:
          tcpSocket:
            port: kafka
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 24
        livenessProbe:
          tcpSocket:
            port: kafka
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: kafka-data
          mountPath: /kafka
      terminationGracePeriodSeconds: 10
  volumeClaimTemplates:
  - metadata:
      name: kafka-data
    spec:
      {{- if or .Values.storageClass .Values.kafka.storageClass }}
      storageClassName: {{ default .Values.storageClass .Values.kafka.storageClass | quote }}
      {{- end }}
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.kafka.storage }}
{{- end }}
