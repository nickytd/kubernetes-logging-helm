apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-index-templates
data:
{{- range $path, $bytes := .Files.Glob "index-templates/*.json" }}
{{- $name := base (dir $path) }}
{{ base $path | indent 2}}: |-
{{ (tpl ($.Files.Get $path) $)| indent 4 }}
{{- end }}
  templates.sh: |-
    #!/bin/bash

    echo "INFO: --=== Prefly checking ===--"

    # Check input parameters
    if [[ -z ${os_url+x} ]]; then
      echo "ERROR: OpenSearch url env variable (os_url) is expected but not found!"
      exit -1
    elif [ -z ${os_cacert_file+x} ]; then
      echo "ERROR: OpenSearch CA Certificate env variable (cacert_file) is expected but not found!";
      exit -1
    elif [[ -z ${os_user+x} ]]; then
      echo "ERROR: OpenSearch user env variable (os_user) is expected but not found!"
      exit -1
    elif [[ -z ${os_pass+x} ]]; then
      echo "ERROR: OpenSearch password env variable (os_pass) is expected but not found!"
      exit -1
    elif [[ -z ${os_data_nodes+x} ]]; then
      echo "ERROR: OpenSearch data nodes count env variable (os_data_nodes) is expected but not found!"
      exit -1
    fi
    echo "INFO: Input parameters found."

    # Check for secure comminucation with OS cluster
    echo "INFO: Checking secure communication with OpenSearch cluster ..."
    curl -s --cacert $os_cacert_file -X GET -u$os_user:$os_pass \
      -o /dev/null "$os_url/_cat/health"
    errcode=$?

    if [[ $errcode == "60" ]]; then
      echo "ERROR: Failed to verify the legitimacy of the server, check CA certificate!!!"
      exit 1
    elif [[ $errcode != "0" ]]; then
      curl -s --cacert $os_cacert_file -X GET -u$os_user:$os_pass "$os_url/_cat/health"
      echo "ERROR: It isnt possible to communicate with OpenSearch cluster!!!"
      exit 1
    # TODO: Add aditional curl error codes explanation
    fi
    echo "INFO: It is possible to secure communicate with OpenSearch cluster."

    # Check cluster health
    echo -e "INFO: Checking cluster health ..."
    health=$(curl -s --cacert $os_cacert_file -X GET \
             -u$os_user:$os_pass "$os_url/_cat/health" | awk '{print $4}')
    if [[ $health = "green" ]]; then
      echo "INFO: Cluster health is green."
    elif [[ $health = "yellow" ]]; then
      echo "WARN: Cluster health is yellow."
    elif [[ $health = "red" ]]; then
      echo "ERROR: Cluster health is red!!!"
      exit 1
    elif [[ -z $health ]]; then
      echo "ERROR: It isnt possible to communicate with OpenSearch cluster!!!"
      exit 1
    fi
    echo "INFO: --=== Prefly checking done ===--"

    echo "INFO: --=== Processing indices templates ===--"
    templates=("component" "index")
    for type in ${templates[@]}; do
      echo "INFO: Seting up $type templates type ..."
      for file in $(find /templates/ -name "*_${type}_template.json" -type f); do
        echo "INFO: Processing file $file:"
        name="$(basename -- $file)"
        template=$(echo $name | cut -d'_' -f 1 | cut -d'/' -f 3)
        echo -e "INFO: ... creating / updating $type template: $template"
        curl -s --cacert $os_cacert_file -X PUT \
          -H "Content-Type: application/json" -u$os_user:$os_pass \
          "$os_url/_${type}_template/$template?pretty=true" -d @$file
        echo -e "INFO: ... done."
      done
    done
    echo "INFO: --===--"

    echo "INFO: --=== Processing indices policies ===--"

    echo "INFO: Disabling ISM history"
    curl -s --cacert $os_cacert_file -X PUT -u$os_user:$os_pass \
      -H "Content-Type: application/json" "$os_url/_cluster/settings?pretty=true" \
      -d "{\"persistent\":{\"opendistro.index_state_management.history.enabled\":false}}"
    if [[ $? -ne 0 ]]; then
      echo "ERROR: It isnt possible disable ISM history!!!"
      exit 1
    else
      echo "INFO: OK, ISM history disabled."
    fi

    # Change default settings for some ISM indices
    ism_indices=(".opendistro-job-scheduler-lock" ".opendistro-ism-config")
    replica_shards=$((os_data_nodes-1))
    for ism_index in ${ism_indices[@]}; do
      echo "INFO: Seting up shards count for \"$ism_index\" index ..."
      index_name=$(tr -d "." <<< "$ism_index")
      json="
      {\"index_patterns\":[\"$ism_index\"],
       \"template\":{\"settings\":
        {\"number_of_shards\":$os_data_nodes,
         \"number_of_replicas\":$replica_shards
      }}}"
      curl -s --cacert $os_cacert_file -X PUT \
        -H "Content-Type: application/json" -u$os_user:$os_pass \
        "$os_url/_index_template/$index_name?pretty=true" \
        -d "$json"
      if [[ $? -ne 0 ]]; then
        echo "ERROR: It isnt possible set shards count for index \"$ism_index\"!!!"
        exit 1
      else
        echo "INFO: Shards count for \"$ism_index\" index set"
        echo "INFO: Shards total: $os_data_nodes, replicas of it: $replica_shards"
      fi
    done

    # Apply templates for policies
    for file in $(find /templates/ -name "*_policy.json" -type f); do
      echo -e "INFO: Processing file $file:"
      name="$(basename -- $file)"
      template=$(echo $name | cut -d'_' -f 1 | cut -d'/' -f 3)

      # Get indices selector
      indices=$(grep "index_patterns" $file | grep -o -E '\[\".*\"\]' | tr -d '"[]')
      echo -e "INFO: Selecting indices by pattern: $indices"
      echo -en "INFO: Ckecking ISM policy $template: "
      exists=$(curl -s --cacert $os_cacert_file -w "%{http_code}" -o /dev/null \
        -X GET -u$os_user:$os_pass "$os_url/_plugins/_ism/policies/$template")
      if [[ $exists -eq 200 ]]; then
        echo -e "exists.\nINFO: Removing old policy implementation from cluster ..."
        # Remove existing ISM policy
        echo "INFO: Removing policy $template:"
        curl -s --cacert $os_cacert_file -X DELETE -u$os_user:$os_pass \
          "$os_url/_plugins/_ism/policies/$template?pretty=true"
        echo "INFO: Removing policy done."
        # Unassign policy from all selected indices
        echo "INFO: Unassigning policy $template from indices:"
        curl -s --cacert $os_cacert_file -X POST -u$os_user:$os_pass \
          "$os_url/_plugins/_ism/remove/$indices?pretty=true"
        echo "INFO: Unassigning policy done."
      else
        echo -e "not exist."
      fi

      # Add ISM policy
      echo "INFO: Adding new policy $template:"
      curl -s --cacert $os_cacert_file -X PUT \
        -H "Content-Type: application/json" -u$os_user:$os_pass \
        "$os_url/_plugins/_ism/policies/$template?pretty=true" -d @$file
      echo "INFO: Adding policy done."
      # Assign policy to all selected indices
      echo "INFO: Assigning policy $template to selected indices:"
      curl -s --cacert $os_cacert_file -X POST \
        -H "Content-Type: application/json" -u$os_user:$os_pass \
        "$os_url/_plugins/_ism/add/$indices?pretty=true" \
        -d "{\"policy_id\": \"$template\"}"
      echo "INFO: Assigning policy done."
      echo "INFO: Processing file $file done."
    done
    echo -e "INFO: --===--"
    exit 0
